<script id="perlinStrata.vert" type="glsl">#version 300 es
        precision highp float;

        // VBO attributes
        in vec4 a_position;
        in vec2 a_tex_coord;
        in vec4 a_normal;

        // Projection method matrix
        uniform mat4 u_mvp_matrix;

        // Vertex noise parameters
        uniform int u_octaves;
        uniform float u_lacunarity;
        uniform float u_gain;
        uniform float u_frequency;
        uniform float u_amplitude;

        // Output to fragment shader
        out vec2 o_tex_coord;
        out vec4 o_normal;
        out float o_level;

        vec2 quint(vec2 st) {
                return vec2( st.x * st.x * st.x * (st.x * (st.x * 6. - 15. ) + 10.),
                                st.y * st.y * st.y * (st.y * (st.y * 6. - 15. ) + 10.));
        }

        float random(vec2 st) { // magic internet numbers LOL
                return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453123);
        }
        
        float noise (in vec2 st) {
                vec2 integer_component = floor(st);
                vec2 fractional_component = fract(st);

                // Random values for corner
                float a = random(integer_component);
                float b = random(integer_component + vec2(1.0, 0.0));
                float c = random(integer_component + vec2(0.0, 1.0));
                float d = random(integer_component + vec2(1.0, 1.0));

                // Interpolation
                // function can be smoothstep() or quint() (better?)
                vec2 u = quint(fractional_component);

                // Mix 4 corners percentages
                return mix(a, b, u.x) +
                        (c - a)* u.y * (1.0 - u.x) +
                        (d - b) * u.x * u.y;
        }

        void main() {

                vec4 pos = a_position;
                float y;

                // Properties
                float lacunarity = u_lacunarity;
                float gain = u_gain;

                // Initial values
                float amplitude = u_amplitude;
                float frequency = u_frequency;

                // Loop of octaves
                for (int i = 0; i < u_octaves; i++) {
                        y += amplitude * noise(frequency*(pos.xz)); // pos.xz + u_time/4096.0 if animation
                        frequency *= lacunarity;
                        amplitude *= gain;
                }

                pos.y += y;
                gl_Position = u_mvp_matrix * pos;

                o_tex_coord = a_tex_coord;
                o_normal = a_normal;
                o_level = y;
        }
</script>

<script id="perlinStrata.frag" type="glsl">#version 300 es
        precision highp float;
        in vec2 o_tex_coord;
        in vec4 o_normal;
        in float o_level;

        uniform vec4 u_fog_clr;
        uniform float u_far;
        uniform float u_near;
        uniform sampler2D u_sampler;
        uniform float u_time;

        out vec4 FragColor;

        void main() {
                vec4 color = texture(u_sampler, o_tex_coord);
                color.x = mix(color.x, 0.5,  fract((o_level*64.0)/8.0));
                color.y = mix(color.y, 0.5, fract((o_level*64.0)/8.0));
                color.z = mix(color.z, 0.5, fract((o_level*64.0)/8.0));
                float fog_factor = clamp(exp2(gl_FragCoord.z) / gl_FragCoord.w / (u_far/2.0 - u_near), 0.0, 1.0);
                FragColor = mix(color, u_fog_clr, fog_factor);
        }
</script>

// Blinn-Phong
vec3 pointLightBT(vec3 norm, vec3 viewDir,
        vec3 lightClr, vec3 lightPos, float spec_stren, float specExp, 
        vec3 ambient, vec3 albedo)
{
        float dist = length(lightPos - o_FragPos);

        vec3 lightDir = normalize(lightPos - o_FragPos);
        vec3 halfway = normalize(lightDir + viewDir);
        
        float ndl = max(dot(norm, lightDir), 0.0);

        float diff = ndl / (dist * dist + 1.0);
        vec3 diffuse = diff * lightClr;

        float spec = ndl * pow(clamp(dot(norm, halfway), 0.0, 1.0), specExp) / (dist * dist + 1.0);
        
        vec3 specular = spec_stren * spec * lightClr;
        return (diffuse + specular + ambient) * albedo;
}

     
// learnopengl version
void main() {
                                float percepExp = 2.0;
                                vec4 tex = texture(u_albedoMap, o_tex_coord);
                                if (tex.a == 0.0) { discard; }// if 100% transparent
                                vec3 albedo = pow(tex.rgb, vec3(u_gamma)); // un gamma correct because not using textures made for sRGB

                                float metalness = texture(u_metalMap, o_tex_coord).r;
                                float roughness = pow(texture(u_roughMap, o_tex_coord).r, percepExp);

                                vec3 map_normal = normalize(texture(u_normalMap, o_tex_coord).rgb * 2.0 - 1.0);
                                vec3 N = normalize(o_tbn * clamp(map_normal, vec3(-1.0), vec3(1.0)));
                                vec3 V = normalize(u_viewPos - o_FragPos);
                                vec3 F0 = u_base_reflectivity;
                                F0 = mix(F0, albedo, metalness);

                                vec3 Lo = vec3(0.0);
                                for(int i = 0; i < u_lightCount; ++i) 
                                {
                                        // calculate per-light radiance
                                        vec3 L = normalize(u_lightPositions[i] - o_FragPos);
                                        vec3 H = normalize(V + L);
                                        float distance    = length(u_lightPositions[i] - o_FragPos);
                                        float attenuation = 1.0 / (distance * distance);
                                        vec3 radiance     = u_lightColors[i] * attenuation;        
                                        
                                        // cook-torrance brdf
                                        float ndh = max(dot(N, H), 0.0);
                                        float ndv = max(dot(N, V), 0.0);
                                        float ndl = max(dot(N, L), 0.0);

                                        float NDF = NDF(ndh, roughness);
                                        float k = (roughness+1.0) * (roughness+1.0) / 8.0; // supposedly different for image based lighting
                                        float G = GGX(ndv, ndl, k);
                                        vec3 F = fresnel(ndv, F0);      
                                        
                                        vec3 kS = F;
                                        vec3 kD = vec3(1.0) - kS;
                                        kD *= 1.0 - metalness;	  
                                        
                                        vec3 numerator    = NDF * G * F;
                                        float denominator = 4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0);
                                        vec3 specular     = numerator / max(denominator, 0.001);  
                                        
                                        // add to outgoing radiance Lo              
                                        Lo += (kD * albedo / PI + specular) * radiance * ndl; 
                                }   
                                
                                vec3 ambient = vec3(0.03) * albedo * 1.0;
                                vec3 color = ambient + Lo;
                                        
                                //color = color / (color + vec3(1.0));
                                color = pow(color, vec3(1.0/u_gamma));  
                                
                                FragColor = vec4(color, 1.0);
                        }